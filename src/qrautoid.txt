// Generation of QR Code in React Native
// https://aboutreact.com/generation-of-qr-code-in-react-native/

// import React in our code
import React, { useState, useRef, useEffect } from 'react';

// import all the components we are going to use
import {
  SafeAreaView,
  Text,
  View,
  StyleSheet,
  TouchableOpacity,
  ToastAndroid,
} from 'react-native';
import { captureRef } from 'react-native-view-shot';
import RNFS from 'react-native-fs';
import QRCode from 'react-native-qrcode-svg';
import RNFetchBlob from 'rn-fetch-blob';
import ViewShot from 'react-native-view-shot';
import Share from 'react-native-share';
import { PermissionsAndroid, Platform } from 'react-native';
import { request, PERMISSIONS } from 'react-native-permissions';

const App = () => {
  const [qrvalue, setQrvalue] = useState('');
  const [userId, setUserId] = useState('');

  let myQRCode = useRef();
  const viewRef = useRef();

  const shareQRCode = async () => {
    try {
      const uri = await captureRef(myQRCode, {
        format: 'png',
        quality: 0.8,
      });

      const options = {
        type: 'image/png',
        url: uri,
      };

      await Share.open(options);
    } catch (error) {
      console.error('Error sharing QR code:', error.message);
    }
  };

  const saveQRCode = async () => {
    try {
      if (Platform.OS === 'android') {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE
        );
        if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
          ToastAndroid.show('Storage permission denied', ToastAndroid.SHORT);
          return;
        }
      }

      const uri = await captureQRCode();
      if (uri) {
        const saveLocation = '/storage/emulated/0/DCIM/qrCode.png'; // Replace with your desired save location
        await saveImageToLocation(uri, saveLocation);
        const path = RNFetchBlob.fs.dirs.DCIMDir + '/qrcode.png';
        await RNFetchBlob.fs.writeFile(path, uri);
        if (Platform.OS === 'android') {
          await RNFetchBlob.fs.scanFile([{ path }]);
          await saveImageToLocation(uri, saveLocation);
        }
        ToastAndroid.show('QR code saved to specified location', ToastAndroid.SHORT);
      } else {
        ToastAndroid.show('Failed to save QR code', ToastAndroid.SHORT);
      }
    } catch (error) {
      console.error(error);
    }
  };

  const captureQRCode = () => {
    return new Promise((resolve, reject) => {
      viewRef.current.capture().then((uri) => {
        resolve(uri);
      }).catch((error) => {
        reject(error);
      });
    });
  };

  const saveImageToLocation = async (uri, saveLocation) => {
    try {
      const res = await RNFetchBlob.fs.cp(uri, saveLocation);
      return res;
    } catch (error) {
      console.error(error);
      throw error;
    }
  };

  useEffect(() => {
    setUserId('1234566'); 
    generateQRCode(); 
  }, []);

  const generateQRCode = () => {
   
    setQrvalue(userId ? userId : 'NA');
  };

  return (
    <SafeAreaView style={{ flex: 1 }}>
      <View style={styles.container}>
        <Text style={styles.titleStyle}>Generate QR</Text>
        <ViewShot ref={viewRef}>
          <QRCode
            getRef={(ref) => (myQRCode = ref)}
            value={qrvalue ? qrvalue : 'NA'}
            size={250}
            color="black"
            backgroundColor="white"
            logoSize={30}
            logoMargin={2}
            logoBorderRadius={15}
            logoBackgroundColor="white"
            logo={require('./assets/ddx.png')}
          />
          <View style={{ alignItems: 'center' }}>
            <Text style={{ fontSize: 18, fontWeight: 'bold' }}>DataDynamix Inc.</Text>
          </View>
        </ViewShot>
        <TouchableOpacity style={styles.buttonStyle} onPress={shareQRCode}>
          <Text style={styles.buttonTextStyle}>Share QR</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.buttonStyle} onPress={saveQRCode}>
          <Text style={styles.buttonTextStyle}>Save QR</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

export default App;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'white',
    justifyContent: 'center',
    alignItems: 'center',
    textAlign: 'center',
    padding: 10,
  },
  titleStyle: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  textStyle: {
    textAlign: 'center',
    margin: 10,
  },
  buttonStyle: {
    backgroundColor: 'deepskyblue',
    marginTop: 32,
    marginRight: 5,
    paddingVertical: 10,
    paddingHorizontal: 35,
    borderRadius: 20,
    paddingBottom: 17,
  },
  buttonTextStyle: {
    color: '#FFFFFF',
    paddingVertical: 10,
    fontSize: 16,
  },
});
