import { StyleSheet, Text, View,SafeAreaView,TextInput,QRTextValue,QRLogoImage,TouchableOpacity } from 'react-native'
import React from 'react'
import QRCode from 'react-native-qrcode-svg'
import RNFetchBlob from 'rn-fetch-blob';
import Share from 'react-native-share';

export default function QR() {
const [QRvalue, setQRValue] = React.useState('');
const [QRLogo, setQRLogo] = React.useState('');
const [QRImage, setQRImage] = React.useState('');
const ref = React.useRef();

const GenerateQR=() => {
  ref.current.toDataURL((data) => {
  setQRImage('data:image/png;base64,'+data)
  })
}

const handleSave = async () => {
  if (Platform.OS === 'android') {
  var isReadGranted = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
    );
  }
  if (isReadGranted === PermissionsAndroid.RESULTS.GRANTED) {
    const dirs = RNFetchBlob.fs.dirs
    var qrcode_data = QRImage.split('data:image/png;base64,');
    const filePath = dirs.DownloadDir+"/"+'QRCode'+new Date().getSeconds()+'.png'
    RNFetchBlob.fs.writeFile(filePath, qrcode_data[1], 'base64')
    .then(() =>  console.log("Saved successfully"))
    .catch((errorMessage) =>console.log(errorMessage))      
    }
    if (Platform.OS ==='ios') {
    const options={
      title: 'Share is your QRcode',
      url: QRImage,
    }
  try {
    await Share.open(options);
  } catch (err) {
    console.log(err)
  }
  }
}

const handleShare =async ()=>{
  const options={
    title: 'Share is your QRcode',
    url: QRImage,
  }
try {
  await Share.open(options);
} catch (err) {
  console.log(err)
}
}

  return (
    <SafeAreaView>
    <View style={styles.sectionContainer}>
      <Text style={styles.sectionTitle}>Generate QRCode</Text>
      <View style={styles.row}>
        <TextInput 
          placeholder= "Add Value to QRCode"
          style={styles.textInput}
          autoCapitalize="none"
          value={QRvalue}
          onChangeText={setQRValue}
        />
        <TextInput 
          placeholder= "Add Logo URL"
          style={styles.textInput}
          autoCapitalize="none"
          value={QRLogo}
          onChangeText={setQRLogo}
        />
        </View>
    <QRCode
    size={320}
    value={QRTextValue ? QRTextValue : 'NA'}
    logo={{uri: QRLogoImage}}
    logoSize={60}
    logoBackgroundColor='transparent'
    getRef={ref}
  />
  <View style={styles.sectionContainer}>
    <TouchableOpacity
    style={styles.newButton}
    onPress={()=>GenerateQR()}>
      <Text style={[styles.sectionDescription,{color: '#fff', fontWeight: '900'}]}>Generate QR</Text>
    </TouchableOpacity>
    </View>
    <View style={styles.row}>

    <TouchableOpacity
    style={styles.Button}
    onPress={()=>handleShare()}>
      <Text style={[styles.sectionDescription,{color: '#fff', fontWeight: '900'}]}>Share QR</Text>
    </TouchableOpacity>
    <TouchableOpacity
    style={styles.Button}
    onPress={()=>handleSave()}>
      <Text style={[styles.sectionDescription,{color: '#fff', fontWeight: '900'}]}>Save QR</Text>
    </TouchableOpacity>
    </View>
  </View>
  </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  sectionContainer: {
    marginTop: 32,
    paddingHorizontal: 24,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '600',
    textAlign: 'center',
  },
  highlight: {
    fontWeight: '700',
  },
  row: {
    flexDirection: 'row',
    marginTop: 10,
    },
  textInput: {
    paddingVertical: 10,
    paddingHorizontal: 10,
    textAlign: 'center',
    marginRight: 5,
    marginVertical: 20,
    borderRadius: 20,
    width: 162,
    borderWidth: 1,
    borderStyle: 'solid',
  },
  sectionDescription: {
    marginTop: 8,
    fontSize: 18,
    fontWeight: '400',
  },
  newButton: {
    backgroundColor: 'deepskyblue',
   marginHorizontal: 0,
   paddingVertical: 10,
   paddingHorizontal: 75,
   borderRadius: 20,
   paddingBottom: 17,
  },
  Button: {
   backgroundColor: 'deepskyblue',
   marginTop: 32,
   marginRight: 20,
   paddingVertical: 10,
   paddingHorizontal: 35,
   borderRadius: 20,
   paddingBottom: 17,
  },
});